{"title":"第一章Vue核心","uid":"966480bfe75397d505c1870990c97c6c","slug":"第一章Vue基础","date":"2023-01-07T12:21:00.000Z","updated":"2023-01-15T06:43:47.216Z","comments":true,"path":"api/articles/第一章Vue基础.json","keywords":null,"cover":[],"content":"<h2 id=\"Vue核心\"><a href=\"#Vue核心\" class=\"headerlink\" title=\"Vue核心\"></a>Vue核心</h2><h3 id=\"01-初识Vue\"><a href=\"#01-初识Vue\" class=\"headerlink\" title=\"01_初识Vue:\"></a>01_初识Vue:</h3><pre><code>1. 想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象\n2. root容器里的代码依然符合html规范，只不过混入了特殊的Vue语法\n3. root容器里的代码被称为【Vue模板】\n4. Vue实例和容器是一一对应的\n5. 真实开发中只有一个Vue实例，并且会配合着组件一起使用\n6. &#123;&#123;xxx&#125;&#125;中的xxxx要写js表达式，且xxx可以自动读取到data中的所有属性\n7. 一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 准备一个容器 --&gt;\n   &lt;div id &#x3D; &quot;root&quot;&gt;\n       &lt;h1&gt; Hello, &#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;\n   &lt;&#x2F;div&gt; \n   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n       Vue.config.productionTip &#x3D; false\n\n       new Vue(&#123;\n           el: &#39;#root&#39;,     &#x2F;&#x2F;el用于指定当前Vue实例为哪个容器服务\n           data: &#123;         &#x2F;&#x2F;data中用于存储数据，数据供el所指定的容器去使用，\n               name : &#39;张三&#39;   \n           &#125;\n       &#125;)\n   &lt;&#x2F;script&gt; </code></pre>\n\n<h3 id=\"02-Vue模板语法\"><a href=\"#02-Vue模板语法\" class=\"headerlink\" title=\"02_Vue模板语法\"></a>02_Vue模板语法</h3><pre><code>1. 插值语法：\n    功能： 用于解析标签体内容\n    写法： &#123;&#123;xxx&#125;&#125;, xxx是js表达式，且可以直接读取到data中的所有属性\n2. 指令语法：\n    功能： 用于解析标签（包括：标签属性，标签体内容，绑定时间\n    举例： v-bind:href = &quot;xxx&quot; 或 简写为:href = &quot;xxx&quot;, xxx同样要写js表达式，且可以直接读取到data所有属性\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"> &lt;div id &#x3D; &quot;root&quot;&gt;\n    &lt;h1&gt; 插值语法 &lt;&#x2F;h1&gt; \n    &lt;h3&gt; 你好，&#123;&#123;name&#125;&#125;&lt;&#x2F;h3&gt;  \n    &lt;h1&gt; 指令语法 &lt;&#x2F;h1&gt;   \n    &lt;a :href&#x3D;&quot;school.url.toUpperCase()&quot;&gt;百度一下啊&#123;&#123;school.name&#125;&#125;&lt;&#x2F;a&gt;\n    &lt;a :href&#x3D;&quot;Date.now&quot;&gt;&#123;&#123;school.name&#125;&#125;&lt;&#x2F;a&gt;\n    \n&lt;&#x2F;div&gt; \n\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false \n    new Vue(&#123;\n        el: &#39;#root&#39;,     &#x2F;&#x2F;el用于指定当前Vue实例为哪个容器服务\n        data: &#123;         &#x2F;&#x2F;data中用于存储数据，数据供el所指定的容器去使用，\n            name : &#39;张三&#39;,\n            school: &#123;\n                name: &#39;尚硅谷&#39;,\n                url: &#39;http:&#x2F;&#x2F;www.baidu.com&#39;\n            &#125;\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt; </code></pre>\n</code></pre>\n<h3 id=\"03-数据绑定\"><a href=\"#03-数据绑定\" class=\"headerlink\" title=\"03_数据绑定\"></a>03_数据绑定</h3><pre><code>Vue中有2种数据绑定方式\n   1. 单向绑定(v-bdin): 数据只能从data流向页面\n   2. 双向绑定(v-model): 数据不仅能从data流向页面，还可以从页面流向data\n\n注意：  \n**1.双向绑定一般应用在表单元素上（如：input, select)**  \n**2. v-model:value可以简写为v-model， 因为v-model默认收集的就是value值**\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id &#x3D; &quot;root&quot;&gt;\n    &lt;!-- 普通写法 --&gt;\n    &lt;!-- 单向数据绑定: &lt;input type&#x3D;&quot;text&quot; v-bind:value&#x3D;&quot;name&quot;&#x2F;&gt;&lt;br&#x2F;&gt;\n    双向数据绑定: &lt;input type&#x3D;&quot;text&quot; v-model:value&#x3D;&quot;name&quot;&#x2F;&gt; --&gt;\n    &lt;!-- 简写 --&gt;\n    单向数据绑定: &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;name1&quot;&#x2F;&gt;&lt;br&#x2F;&gt;\n    双向数据绑定: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name2&quot;&#x2F;&gt;\n&lt;&#x2F;div&gt; \n\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false   \n    new Vue(&#123;\n        el: &#39;#root&#39;,\n        data: &#123;\n            name1: &#39;尚硅谷1&#39;,\n            name2: &#39;尚硅谷2&#39;\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt; </code></pre>\n</code></pre>\n<h3 id=\"04-el与data的两种写法\"><a href=\"#04-el与data的两种写法\" class=\"headerlink\" title=\"04_el与data的两种写法\"></a>04_el与data的两种写法</h3><pre><code>* el的两种写法  \n    * new Vue时配置el属性\n    * 先创建Vue实例，随后再通过vm.$mount(&#39;#root&#39;)指定el的值\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt; 你好，&#123;&#123;name&#125;&#125; &lt;&#x2F;h1&gt;\n&lt;&#x2F;div&gt;\n&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n    Vue.config.productionTip &#x3D; false\n    const v &#x3D; new Vue(&#123; \n        &#x2F;&#x2F;el: &#39;#root&#39;,      &#x2F;&#x2F;第一种写法\n        data: &#123;\n            name: &#39;尚硅谷&#39;\n        &#125;\n    &#125;)\n    console.log(v);\n    setTimeout(() &#x3D;&gt; &#123;\n        v.$mount(&#39;#root&#39;)       &#x2F;&#x2F;第二种写法\n    &#125;, 1000);\n&lt;&#x2F;script&gt;</code></pre>\n\n* data的两种写法\n* 对象式\n* 函数式  \n**如何选择： 目前哪种写法都可以，以后学习组件时，data必须使用函数式，否则会报错**        \n    <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n    Vue.config.productionTip &#x3D; false\n    new Vue(&#123; \n        el: &#39;#root&#39;,      &#x2F;&#x2F;第一种写法\n        &#x2F;&#x2F;data的第一种写法：对象式\n        &#x2F;* data: &#123;\n            name: &#39;尚硅谷&#39;\n        &#125; *&#x2F;\n        \n        &#x2F;&#x2F; data的第二种写法：函数式\n        data()&#123;\n            console.log(&#39;@@@&#39;, this)\n            return &#123;\n                name:&#39;尚硅谷&#39;\n            &#125;\n        &#125;\n    &#125;) \n&lt;&#x2F;script&gt;</code></pre>\n\n* 一个重要的原则：    \n    **由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了**\n    \n</code></pre>\n<h3 id=\"05-MVVM\"><a href=\"#05-MVVM\" class=\"headerlink\" title=\"05_MVVM\"></a>05_MVVM</h3><pre><code>1. M: 模型(Model)\n2. V: 视图(View): 模块\n3. VM: 视图模型(ViewModel)： Vue实例对象\n观察发现：\n    1. data中所有的属性，最后都出现在了vm上\n    2. vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用  \n</code></pre>\n<p><img src=\"/2023/01/07/%E7%AC%AC%E4%B8%80%E7%AB%A0Vue%E5%9F%BA%E7%A1%80/2023-01-07-20-25-32.png\"><br><img src=\"/2023/01/07/%E7%AC%AC%E4%B8%80%E7%AB%A0Vue%E5%9F%BA%E7%A1%80/2023-01-07-20-37-30.png\"> </p>\n<h3 id=\"06-数据代理\"><a href=\"#06-数据代理\" class=\"headerlink\" title=\"06_数据代理\"></a>06_数据代理</h3><h4 id=\"回顾Object-defineproperty方法\"><a href=\"#回顾Object-defineproperty方法\" class=\"headerlink\" title=\"回顾Object.defineproperty方法\"></a>回顾Object.defineproperty方法</h4><pre><code><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let number &#x3D; 20\n    let person &#x3D; &#123;\n        name:&#39;张三&#39;,\n        sex:&#39;男&#39; \n    &#125; \n    Object.defineProperty(person, &#39;age&#39;, &#123;\n      &#x2F;*   value:18,\n        enumerable: true,    &#x2F;&#x2F;控制属性是否可以枚举，默认值是false\n        writable: true,     &#x2F;&#x2F;控制属性是否可以被修改，默认值是false\n        configurable: true  &#x2F;&#x2F; 控制属性是否可以被删除，默认值是false *&#x2F;\n        get:function() &#123;\n            console.log(&#39;有人读取age属性了&#39;)\n            return number;\n        &#125;,\n        set:function(value) &#123;\n            console.log(&#39;有人修改age属性&#39;)\n            number &#x3D; value\n        &#125;\n    &#125;) \n    for(let key in person) \n        console.log(&#39;@&#39;, person[key]);\n    console.log(person);\n\n&lt;&#x2F;script&gt;</code></pre>\n</code></pre>\n<h4 id=\"何为数据代理\"><a href=\"#何为数据代理\" class=\"headerlink\" title=\"何为数据代理\"></a>何为数据代理</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 用Obj2操纵obj的x属性 --&gt;\n &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let obj &#x3D; &#123;x:100&#125;\n    let obj2 &#x3D; &#123;y:200&#125;\n\n    Object.defineProperty(obj2, &#39;x&#39;, &#123;\n        get() &#123;\n            return obj.x\n        &#125;,\n        set(value) &#123;\n            obj.x &#x3D; value\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n<h4 id=\"Vue中的数据代理\"><a href=\"#Vue中的数据代理\" class=\"headerlink\" title=\"Vue中的数据代理\"></a>Vue中的数据代理</h4><pre><code>1. Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读/写)\n2. Vue中的数据代理好处： 更加方便的操作data中的数据\n3. 基本原理：通过Object.defineProperty()把data对象中所有属性添加到vm上，为每一个添加到vm上的属性，都指定一个getter/setter。在getter/setter操作（读/写)data中对应的\n</code></pre>\n<p><img src=\"/2023/01/07/%E7%AC%AC%E4%B8%80%E7%AB%A0Vue%E5%9F%BA%E7%A1%80/2023-01-08-20-27-16.png\"></p>\n<h3 id=\"07-事件处理\"><a href=\"#07-事件处理\" class=\"headerlink\" title=\"07_事件处理\"></a>07_事件处理</h3><h4 id=\"1-事件的基本使用\"><a href=\"#1-事件的基本使用\" class=\"headerlink\" title=\"1.事件的基本使用\"></a>1.事件的基本使用</h4><pre><code>1. 使用v-on:xxx 或 @xxx绑定事件，其中xxx是时间名\n2. 事件的回调需要配置在methods对象中，最终会在vm上\n3. methods中配置的函数，不要用箭头函数，否则this就不是vm了\n4. methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件\n5. @click=&quot;demo&quot; 和@click=&quot;demo($event)&quot; 效果一致，但后者可以传参\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt;\n        &lt;h1&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;&#x2F;h1&gt;\n        &lt;button @click&#x3D;&quot;showInfo1&quot;&gt; 点我提示信息1(不传参)&lt;&#x2F;button&gt;&lt;&#x2F;br&gt;\n        &lt;button @click&#x3D;&quot;showInfo2(453, $event)&quot;&gt; 点我提示信息2(传参)&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n    &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                name: &#39;尚硅谷&#39;\n            &#125;,\n            methods: &#123;\n                showInfo1() &#123; \n                    alert(&quot;同学你好！&quot;)\n                &#125;,\n                showInfo2(number, event) &#123; \n                    console.log(number, event)\n                &#125;\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt;</code></pre>\n<h4 id=\"2-事件修饰符\"><a href=\"#2-事件修饰符\" class=\"headerlink\" title=\"2.事件修饰符\"></a>2.事件修饰符</h4><pre><code>1. prevent: 阻止默认事件（常用）\n2. stop: 阻止事件冒泡（常用）\n3. once: 事件只触发一次（常用）\n4. capture: 事件只触发一次（常用）\n5. self: 只有event.target是当前操作的元素时才触发事件\n6. passive: 事件的默认行为立即执行，无需等待事件回调执行完毕\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;style&gt;\n    *&#123;\n        margin-top: 20px;\n    &#125;\n    .demo1&#123;\n        height: 50px;\n        background-color: skyblue;\n    &#125;\n    .box1&#123;\n        padding: 5px;\n        background-color: skyblue;\n    &#125;\n    .box2&#123;\n        padding: 5px;\n        background-color: orange;\n    &#125;\n    .list&#123;\n        width: 200px;\n        height: 200px;\n        background-color: peru;\n        overflow: auto;\n    &#125;\n    li&#123;\n        height: 100px;\n    &#125;\n&lt;&#x2F;style&gt;\n&lt;body&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;\n        &lt;h1&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;&#x2F;h1&gt; \n        &lt;!-- 阻止默认事件（常用） --&gt;\n        &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.atguigu.com&quot; @click.prevent&#x3D;&quot;showInfo&quot;&gt;点我提示息&lt;&#x2F;a&gt; \n        &lt;!-- 阻止事件冒泡（常用） --&gt;\n        &lt;div class &#x3D; &quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt;\n            &lt;button @click.stop&#x3D;&quot;showInfo&quot;&gt;点我提示信息&lt;&#x2F;button&gt;\n        &lt;&#x2F;div&gt;\n        &lt;!-- 事件只触发一次（常用） --&gt;\n        &lt;button @click.once&#x3D;&quot;showInfo&quot;&gt;点我提示信息&lt;&#x2F;button&gt;&lt;&#x2F;button&gt;\n        &lt;!-- 使用事件的捕获模式 --&gt;\n        &lt;div class&#x3D;&quot;box1&quot; @click.capture&#x3D;&quot;showMsg(1)&quot;&gt;\n            div1\n            &lt;div class&#x3D;&quot;box2&quot; @click&#x3D;&quot;showMsg(2)&quot;&gt;\n                div2\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n        &lt;!-- 只有event.target是当前操作的元素时才触发事件 --&gt;\n        &lt;div class &#x3D; &quot;demo1&quot; @click.self&#x3D;&quot;showInfo&quot;&gt;\n            &lt;button @click&#x3D;&quot;showInfo&quot;&gt;点我提示信息&lt;&#x2F;button&gt;\n        &lt;&#x2F;div&gt;\n        &lt;!-- 事件的默认行为立即执行，无需等待事件回调执行 --&gt;\n        &lt;ul @wheel.passive&#x3D;&quot;demo&quot; class&#x3D;&quot;list&quot;&gt;\n            &lt;li&gt;1&lt;&#x2F;li&gt;\n            &lt;li&gt;2&lt;&#x2F;li&gt; \n            &lt;li&gt;3&lt;&#x2F;li&gt;\n            &lt;li&gt;4&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n    &lt;&#x2F;div&gt;\n    \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;, \n            data: &#123;\n                name: &#39;尚硅谷&#39;\n            &#125;,\n            methods: &#123; \n                showInfo(e) &#123; \n                    console.log(e.target)\n                &#125;,\n                showMsg(msg) &#123;\n                    console.log(msg)\n                &#125;,\n                demo() &#123;\n                    for(let i &#x3D; 0; i &lt; 100000; i++) &#123;\n                        console.log(&#39;#&#39;)\n                    &#125;\n                    console.log(&#39;累坏了&#39;)\n                &#125;\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt; \n&lt;&#x2F;body&gt; \n&lt;&#x2F;html&gt; </code></pre>\n\n<h4 id=\"3-键盘事件\"><a href=\"#3-键盘事件\" class=\"headerlink\" title=\"3.键盘事件\"></a>3.键盘事件</h4><pre><code>   1. Vue中常用的按键别名 \n       * 回车  =&gt; enter\n       * 删除  =&gt; delete\n       * 退出  =&gt; esc\n       * 换行  =&gt; tab\n       * 上    =&gt; up\n       * 下    =&gt; down\n       * 左    =&gt; left\n       * 右    =&gt; right\n   2. Vue未提供别名的按键，可以使用按键原始的Key值去绑定，但注意要转为kebab-case（短横线命名）\n   3. 系统修饰键（用法特殊）：ctrl, alt, shift, meta\n   4. 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发\n   5. 配合keydown使用： 正常触发事件 \n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.ctrl.y&#x3D;&quot;showInfo&quot;&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    Vue.config.productionTip &#x3D; false\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            name: &#39;尚硅谷&#39;\n        &#125;,\n        methods: &#123;\n            showInfo(e) &#123;\n                console.log(e.key, e.keyCode)\n                &#x2F;&#x2F; console.log(e.target.value)\n            &#125;\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n<h3 id=\"08-计算属性\"><a href=\"#08-计算属性\" class=\"headerlink\" title=\"08_计算属性\"></a>08_计算属性</h3><h4 id=\"姓名案例-methods实现\"><a href=\"#姓名案例-methods实现\" class=\"headerlink\" title=\"姓名案例_methods实现\"></a>姓名案例_methods实现</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt; \n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n    全名：&lt;span&gt;&#123;&#123;fullName()&#125;&#125;&lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    Vue.config.productionTip &#x3D; false\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            firstName: &#39;张&#39;,\n            lastName: &#39;三&#39;\n        &#125;,\n        methods: &#123; \n                fullName() &#123;\n                    return this.firstName + &#39;-&#39; + this.lastName;\n                &#125;\n            &#125; \n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n<h4 id=\"姓名案例-计算属性实现\"><a href=\"#姓名案例-计算属性实现\" class=\"headerlink\" title=\"姓名案例_计算属性实现\"></a>姓名案例_计算属性实现</h4><pre><code>1. 定义：要用的属性不存在，要通过已有属性计算得来\n2. 原理： 底层借助了Object.defineproperty方法提供的getter和setter\n3. get函数什么时候执行？\n   1. 初次读取时会执行一次\n   2. 当依赖的数据发生改变时会被再次调用\n4. 优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便\n5. 备注：\n   1. 计算属性最终会出现在vm上，直接读取使用即可\n   2. 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时以来的数据发生改变\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt; \n        姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        校名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        \n    &lt;&#x2F;div&gt;\n    \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                firstName: &#39;张&#39;,\n                lastName: &#39;三&#39;,\n                name: &#39;尚硅谷&#39;\n            &#125;,\n            computed: &#123;\n                fullName: &#123;\n                    get() &#123;\n                        console.log(&quot;@@@@@@@@@@&quot;)\n                        return this.firstName + &#39;-&#39; + this.lastName;\n                    &#125;,\n                    set(value) &#123;\n                        const arr &#x3D; value.split(&#39;-&#39;)\n                        this.firstName &#x3D; arr[0]\n                        this.lastName &#x3D; arr[1]\n                    &#125;\n                &#125;\n            &#125;   \n        &#125;)</code></pre>\n<h4 id=\"姓名案例-计算属性简写\"><a href=\"#姓名案例-计算属性简写\" class=\"headerlink\" title=\"姓名案例_计算属性简写\"></a>姓名案例_计算属性简写</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt; \n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt; \n    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt; \n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    Vue.config.productionTip &#x3D; false\n    const vm &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            firstName: &#39;张&#39;,\n            lastName: &#39;三&#39; \n        &#125;,\n        computed: &#123;     &#x2F;&#x2F;只有get方法\n            fullName() &#123;\n                return this.firstName + &#39;-&#39; + this.lastName;\n            &#125;\n        &#125;   \n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n<h3 id=\"09-监视属性\"><a href=\"#09-监视属性\" class=\"headerlink\" title=\"09_监视属性\"></a>09_监视属性</h3><h4 id=\"天气案例-监视属性\"><a href=\"#天气案例-监视属性\" class=\"headerlink\" title=\"天气案例_监视属性\"></a>天气案例_监视属性</h4><pre><code>监视属性watch:\n    1. 当被监视属性变化时，回调函数自动调用，进行相关操作\n    2. 监视的属性必须存在，才能进行监视\n    3. 监视的两种写法：\n       1. new Vue时传入watch配置\n       2. 通过vm.$watch监视\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt;  \n     &lt;h2&gt;今天天气很好&#123;&#123;info&#125;&#125;，&#123;&#123;x&#125;&#125;&lt;&#x2F;h2&gt;  \n     &lt;button @click&#x3D;&quot;changeWeather&quot;&gt;切换天气&lt;&#x2F;button&gt;\n &lt;&#x2F;div&gt;\n \n &lt;script&gt;\n     Vue.config.productionTip &#x3D; false\n     const vm &#x3D; new Vue(&#123;\n         el: &#39;#app&#39;,\n         data: &#123;\n             isHot: true,\n             x : 0\n         &#125;,\n         computed: &#123;     \n             info() &#123;\n                 return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;\n             &#125;\n         &#125;,\n         methods: &#123;\n             changeWeather() &#123;\n                 this.isHot &#x3D; !this.isHot\n                 this.x ++\n             &#125;\n         &#125;,\n         &#x2F;&#x2F; watch: &#123;\n         &#x2F;&#x2F;     isHot: &#123;\n         &#x2F;&#x2F;         immediate: true,    &#x2F;&#x2F;初始化时让handler调用一下\n         &#x2F;&#x2F;         handler(newValue, oldValue)&#123;        &#x2F;&#x2F;handler什么时候调用，当isHot发生改变时\n         &#x2F;&#x2F;             console.log(&#39;isHot被修改了&#39; ,newValue,  oldValue)\n         &#x2F;&#x2F;         &#125;\n         &#x2F;&#x2F;     &#125;\n         &#x2F;&#x2F; &#125; \n     &#125;)\n     vm.$watch(&#39;isHot&#39;, &#123;\n         immediate: true,    &#x2F;&#x2F;初始化时让handler调用一下\n                 handler(newValue, oldValue)&#123;        &#x2F;&#x2F;handler什么时候调用，当isHot发生改变时\n                     console.log(&#39;isHot被修改了&#39; ,newValue,  oldValue)\n                 &#125;\n     &#125;)\n &lt;&#x2F;script&gt;</code></pre>\n<h4 id=\"天气案例-深度监视\"><a href=\"#天气案例-深度监视\" class=\"headerlink\" title=\"天气案例_深度监视\"></a>天气案例_深度监视</h4><ul>\n<li>深度监视:<ol>\n<li>Vue中的watch默认不检测对象内部值的改变</li>\n<li>配置deep:true可以监测对象内部值改变（多层）</li>\n</ol>\n</li>\n<li>备注：<ol>\n<li>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</li>\n<li>使用watch时根据数据的具体结构，决定是否采用深度监视<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;body&gt;\n    \n    &lt;div id&#x3D;&quot;app&quot;&gt;  \n        &lt;h2&gt;今天天气很好&#123;&#123;info&#125;&#125;&lt;&#x2F;h2&gt;  \n        &lt;button @click&#x3D;&quot;changeWeather&quot;&gt;切换天气&lt;&#x2F;button&gt;\n        &lt;hr&#x2F;&gt;\n        &lt;h3&gt;a的值是:&#123;&#123;numbers.a&#125;&#125;&lt;&#x2F;h3&gt;\n        &lt;button @click&#x3D;&quot;numbers.a++&quot;&gt; 点我让a+1&lt;&#x2F;button&gt;\n        &lt;hr&#x2F;&gt;\n        &lt;h3&gt;b的值是:&#123;&#123;numbers.b&#125;&#125;&lt;&#x2F;h3&gt;\n        &lt;button @click&#x3D;&quot;numbers.b++&quot;&gt; 点我让b+1&lt;&#x2F;button&gt;\n        &lt;hr&#x2F;&gt;\n        &lt;button @click&#x3D;&quot;numbers&#x3D;&#123;a:100, b: 23242&#125;&quot;&gt; 点我让numbers变化&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n    \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                isHot: true,\n                numbers: &#123;\n                    a:1,\n                    b:1\n                &#125;\n            &#125;,\n            computed: &#123;     \n                info() &#123;\n                    return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;\n                &#125;\n            &#125;,\n            methods: &#123;\n                changeWeather() &#123;\n                    this.isHot &#x3D; !this.isHot\n                    this.x ++\n                &#125;\n            &#125;,\n            watch: &#123;\n             &#x2F;*    isHot: &#123;\n                    immediate: true,    &#x2F;&#x2F;初始化时让handler调用一下\n                    handler(newValue, oldValue)&#123;        &#x2F;&#x2F;handler什么时候调用，当isHot发生改变时\n                        console.log(&#39;isHot被修改了&#39; ,newValue,  oldValue)\n                    &#125;\n                &#125;,\n                numbers: &#123;\n                    deep: true,\n                    handler() &#123;\n                        console.log(&#39;nunmbers被修改了&#39;)\n                    &#125;\n                &#125; *&#x2F;\n                &#x2F;&#x2F;简写：\n                isHost(newValue, oldValue) &#123;\n                    console.log(&#39;isHot被修改了&#39;, newValue, oldValue)\n                &#125;\n            &#125; \n        &#125;)\n        &#x2F;* vm.$watch(&#39;isHot&#39;, &#123;\n            immediate: true,    &#x2F;&#x2F;初始化时让handler调用一下\n                    handler(newValue, oldValue)&#123;        &#x2F;&#x2F;handler什么时候调用，当isHot发生改变时\n                        console.log(&#39;isHot被修改了&#39; ,newValue,  oldValue)\n                    &#125;\n        &#125;) *&#x2F;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt; \n          </code></pre></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"computed-与-watch的区别\"><a href=\"#computed-与-watch的区别\" class=\"headerlink\" title=\"computed 与 watch的区别\"></a>computed 与 watch的区别</h4><pre><code>1. computed能完成的功能，watch都可以完成\n2. watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作  \n</code></pre>\n<p>两个重要的小原则：<br>    1. 所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象<br>    2. 所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等，Promise的回调函数），最好写成箭头函数，这样this的指向才是vm或组件实例对象</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt; \n        姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;\n        名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&#x2F;&gt;&lt;br&#x2F;&gt; \n        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt; \n    &lt;&#x2F;div&gt;\n    \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                firstName: &#39;张&#39;,\n                lastName: &#39;三&#39;,\n                fullName: &#39;张-三&#39;\n            &#125;,\n            watch: &#123;\n                &#x2F;&#x2F;firstName与lastName变化，fullName也要变 \n               &#x2F;*  firstName(val) &#123;\n                    this.fullName &#x3D; val + &#39;-&#39; + this.lastName;\n                &#125;, *&#x2F;\n                &#x2F;&#x2F; 等一秒之后再显示全名\n                firstName(val) &#123;\n                    setTimeout(() &#x3D;&gt; &#123;\n                        this.fullName &#x3D; val + &#39;-&#39; + this.lastName;\n                    &#125;, 1000)\n                &#125;,\n                lastName(val) &#123;\n                    this.fullName &#x3D; this.firstName +\n                &#125;\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"10-绑定样式\"><a href=\"#10-绑定样式\" class=\"headerlink\" title=\"10_绑定样式\"></a>10_绑定样式</h3><pre><code>1. class样式写法 :class=&quot;xxx&quot; xxx可以是字符串，对象，数组\n   1. 字符串写法适用于：类名不确定，要动态获取\n   2. 对象写法适用于：要绑定多个样式，个数不确定\n   3. 数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用\n2. style样式\n   1. :style=&quot;&#123;fontSize: xxx&#125;&quot; 其中xxx是动态值\n   2. :style=&quot;[a,b]&quot; 其中a,b是样式对象\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">     &lt;div id&#x3D;&quot;app&quot;&gt; \n        &lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;\n        &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;mood&quot; @click&#x3D;&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n\n        &lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;\n        &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;mood&quot; @click&#x3D;&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n\n        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定，名字也确定，但要动态决定用不用 --&gt;\n        &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classObj&quot; @click&#x3D;&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;\n\n        &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;[styleObj1, styleObj2]&quot;&gt;&#123;&#123;name&#125;&#125; &lt;&#x2F;div&gt; \n    &lt;&#x2F;div&gt;\n    \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123; \n                name: &#39;尚硅谷&#39;,\n                mood: &#39;normal&#39;,\n                a: true,\n                b: true,\n                classObj: &#123;\n                    atguigu1: false,\n                    atguigu2: false\n                &#125;,\n                styleObj1: &#123;\n                    fontSize: &#39;40px&#39;,\n                    color: &#39;red&#39;, \n                &#125;,\n                styleObj2: &#123;\n                    backgroundColor: &#39;orange&#39;\n                &#125;\n            &#125;,\n            methods: &#123;\n                changeMood() &#123;\n                    this.mood &#x3D; &quot;happy&quot;\n                &#125;\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt; </code></pre>\n<h3 id=\"11-条件渲染\"><a href=\"#11-条件渲染\" class=\"headerlink\" title=\"11_条件渲染\"></a>11_条件渲染</h3><pre><code>1. v-if写法：\n   1. v-if=&quot;表达式&quot;\n   2. v-else-if=&quot;表达式&quot;\n   3. v-else=&quot;表达式&quot;\n   * 适用于：切换频率较低的场景\n   * 特点：不展示的DOM元素直接被移除\n   * 注意：v-if可以和：v-else-if、v-else一起使用\n\n2. v-show\n    * 写法：v-show=&quot;表达式&quot;\n    * 适用于：切换频率较高的场景\n    * 特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt; \n&lt;&#x2F;head&gt;\n&lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;body&gt;\n    \n    &lt;div id&#x3D;&quot;app&quot;&gt; \n        &lt;!-- 使用v-show做条件渲染 --&gt;\n      &lt;!--   &lt;h2 v-show&#x3D;&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n        &lt;h2 v-show&#x3D;&quot;1 &#x3D;&#x3D; 3&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n        &lt;h2 v-if&#x3D;&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt; --&gt;\n        &lt;h2&gt;当前n的值是&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt;\n        &lt;button @click&#x3D;&quot;n++&quot;&gt;点我n + 1&lt;&#x2F;button&gt;\n        &lt;div v-if&#x3D;&quot;n &#x3D;&#x3D; 1&quot;&gt;Angular&lt;&#x2F;div&gt;\n        &lt;div v-else-if&#x3D;&quot;n &#x3D;&#x3D; 2&quot;&gt;React&lt;&#x2F;div&gt;\n        &lt;div v-else&gt;Vue&lt;&#x2F;div&gt;\n        &lt;template v-if&#x3D;&quot;n &#x3D;&#x3D; 4&quot;&gt;\n            &lt;h1&gt; 北京 &lt;&#x2F;h1&gt;\n            &lt;h2&gt; 上海 &lt;&#x2F;h2&gt;\n            &lt;h3&gt; 武汉 &lt;&#x2F;h3&gt;\n        &lt;&#x2F;template&gt;\n    &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;  \n                name: &#39;尚硅谷&#39;,\n                n: 0\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n<h3 id=\"12-列表渲染\"><a href=\"#12-列表渲染\" class=\"headerlink\" title=\"12_列表渲染\"></a>12_列表渲染</h3><h4 id=\"1-基本列表\"><a href=\"#1-基本列表\" class=\"headerlink\" title=\"1.基本列表\"></a>1.基本列表</h4><pre><code>v-for指令：\n        1. 用于展示表数据\n        2. 语法：v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;\n        3. 可遍历：数组，对象，字符串（用的很少），指定次数（用的很少）\n</code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt; \n&lt;&#x2F;head&gt;\n&lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;body&gt;\n    \n    &lt;div id&#x3D;&quot;app&quot;&gt;   \n        &lt;h2&gt;人员列表&lt;&#x2F;h2&gt;\n        &lt;ul&gt; \n            &lt;!-- 遍历数组 --&gt;\n            &lt;li v-for&#x3D;&quot;(p, index) of persons&quot; :key&#x3D;&quot;index&quot;&gt;\n                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;---&#123;&#123;index&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n        &lt;h2&gt;汽车信息&lt;&#x2F;h2&gt;\n        &lt;!-- 遍历对象 --&gt;\n        &lt;ul&gt; \n            &lt;li v-for&#x3D;&quot;(value, key) of car&quot; :key&#x3D;&quot;key&quot;&gt;\n                &#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n        &lt;h2&gt;遍历字符串&lt;&#x2F;h2&gt; \n        &lt;ul&gt; \n            &lt;li v-for&#x3D;&quot;(value, key) of str&quot; :key&#x3D;&quot;key&quot;&gt;\n                &#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n        &lt;h2&gt;遍历次数&lt;&#x2F;h2&gt; \n        &lt;ul&gt; \n            &lt;li v-for&#x3D;&quot;(value, key) of 5&quot; :key&#x3D;&quot;key&quot;&gt;\n                &#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n    &lt;&#x2F;div&gt;  \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                persons: [\n                &#123;id: &#39;1001&#39;, name: &#39;李华&#39;, age: 12&#125;,\n                &#123;id: &#39;1002&#39;, name: &#39;张三&#39;, age: 45&#125;,\n                &#123;id: &#39;1003&#39;, name: &#39;赵云&#39;, age: 43&#125;,\n                &#123;id: &#39;1004&#39;, name: &#39;刘备&#39;, age: 56&#125;,\n            ],\n                car: &#123;\n                    name: &#39;奥迪&#39;,\n                    price: &#39;80万&#39;,\n                    color: &#39;黑色&#39;\n                &#125;,\n                str: &#39;hello&#39;\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt; \n&lt;&#x2F;html&gt;</code></pre>\n<h4 id=\"2-key的原理\"><a href=\"#2-key的原理\" class=\"headerlink\" title=\"2.key的原理\"></a>2.key的原理</h4><p><img src=\"/2023/01/07/%E7%AC%AC%E4%B8%80%E7%AB%A0Vue%E5%9F%BA%E7%A1%80/2023-01-13-20-47-08.png\"><br><img src=\"/2023/01/07/%E7%AC%AC%E4%B8%80%E7%AB%A0Vue%E5%9F%BA%E7%A1%80/2023-01-13-20-51-37.png\"></p>\n<ol>\n<li>虚拟DOM中key的作用：<br> key时虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</li>\n<li>对比规则：<ol>\n<li>旧虚拟DOM中找到了与新虚拟DOM相同的key:<ol>\n<li>若虚拟DOM中内容没变，直接使用之前的真实DOM</li>\n<li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>\n</ol>\n</li>\n<li>旧虚拟DOM中未找到与新虚拟DOM相同的key, 创建新的真实的DOM，随后渲染到页面</li>\n</ol>\n</li>\n<li>用index作为key可能会引发的问题：<ol>\n<li>若对数据进行：逆序添加，逆序删除等破坏顺序操作，会产生没有必要的真实DOM更新  &#x3D;&#x3D; 》界面效果没问题，但效率低</li>\n<li>如果结构中还包含输入类的DOM：会产生错误的DOM更新 &#x3D;&#x3D;》界面有问题</li>\n</ol>\n</li>\n<li>开发中如何选择key?:<ol>\n<li>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值</li>\n<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt; \n&lt;&#x2F;head&gt;\n&lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;body&gt;\n    \n    &lt;div id&#x3D;&quot;app&quot;&gt;  \n        &lt;h2&gt;人员列表（遍历数组）&lt;&#x2F;h2&gt;\n        &lt;button @click.once&#x3D;&quot;add&quot;&gt;添加一个老刘&lt;&#x2F;button&gt;\n        &lt;ul&gt; \n            &lt;!-- 遍历数组 --&gt;\n            &lt;li v-for&#x3D;&quot;(p, index) of persons&quot; :key&#x3D;&quot;p.id&quot;&gt;\n                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;---&#123;&#123;index&#125;&#125;\n                &lt;input type &#x3D; &quot;text&quot;&#x2F;&gt;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt; \n    &lt;&#x2F;div&gt;  \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                persons: [\n                &#123;id: &#39;1001&#39;, name: &#39;李华&#39;, age: 12&#125;,\n                &#123;id: &#39;1002&#39;, name: &#39;张三&#39;, age: 45&#125;,\n                &#123;id: &#39;1003&#39;, name: &#39;赵云&#39;, age: 43&#125;,\n                &#123;id: &#39;1004&#39;, name: &#39;刘备&#39;, age: 56&#125;,\n            ]\n            &#125;,\n            methods: &#123;\n                add() &#123;\n                    const p &#x3D; &#123;id:&#39;004&#39;, name:&#39;老刘&#39;, age:40&#125;\n                    this.persons.unshift(p)\n                &#125;\n            &#125; \n        &#125;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt; \n&lt;&#x2F;html&gt;</code></pre></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"3-列表过滤\"><a href=\"#3-列表过滤\" class=\"headerlink\" title=\"3.列表过滤\"></a>3.列表过滤</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;div id&#x3D;&quot;app&quot;&gt;   \n        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入名字&quot; v-model&#x3D;&quot;keyWord&quot;&gt;\n        &lt;ul&gt;  \n            &lt;h2&gt;人员列表&lt;&#x2F;h2&gt;\n            &lt;li v-for&#x3D;&quot;(p, index) of filpersons&quot; :key&#x3D;&quot;index&quot;&gt;\n                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;---&#123;&#123;p.sex&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt; \n    &lt;&#x2F;div&gt;  \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                keyWord: &#39;&#39;,\n                persons: [\n                &#123;id: &#39;1001&#39;, name: &#39;马冬梅&#39;, age: 19, sex: &#39;女&#39;&#125;,\n                &#123;id: &#39;1002&#39;, name: &#39;周冬雨&#39;, age: 20, sex: &#39;女&#39;&#125;,\n                &#123;id: &#39;1003&#39;, name: &#39;周杰伦&#39;, age: 21, sex: &#39;男&#39;&#125;,\n                &#123;id: &#39;1004&#39;, name: &#39;温兆伦&#39;, age: 22, sex: &#39;男&#39;&#125;, \n            ], \n            &#125;,\n            &#x2F;&#x2F;用computed实现\n            computed: &#123;\n                filpersons() &#123;\n                    return this.persons.filter((p)&#x3D;&gt;&#123;\n                        return p.name.indexOf(this.keyWord) !&#x3D;&#x3D; -1\n                    &#125;)\n                &#125;\n            &#125;\n            &#x2F;&#x2F;用watch实现\n            &#x2F;* watch: &#123;\n               keyWord: &#123;\n                immediate: true,\n                handler(val) &#123; \n                    this.filpersons &#x3D; this.persons.filter((p)&#x3D;&gt;&#123;\n                        return p.name.indexOf(val) !&#x3D;&#x3D; -1\n                    &#125;)\n                &#125;\n               &#125;\n                &#125; *&#x2F;\n            &#125;\n        )\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt; \n&lt;&#x2F;html&gt;</code></pre>\n<h4 id=\"4-列表排序\"><a href=\"#4-列表排序\" class=\"headerlink\" title=\"4.列表排序\"></a>4.列表排序</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt;   \n        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入名字&quot; v-model&#x3D;&quot;keyWord&quot;&gt;\n        &lt;button @click&#x3D;&quot;sortType &#x3D; 2&quot;&gt;年龄升序&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&quot;sortType &#x3D; 1&quot;&gt;年龄降序&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&quot;sortType &#x3D; 0&quot;&gt;原顺序&lt;&#x2F;button&gt;\n        &lt;ul&gt;  \n            &lt;h2&gt;人员列表&lt;&#x2F;h2&gt;\n            &lt;li v-for&#x3D;&quot;(p, index) of filpersons&quot; :key&#x3D;&quot;index&quot;&gt;\n                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;---&#123;&#123;p.sex&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt; \n    &lt;&#x2F;div&gt;  \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false\n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                keyWord: &#39;&#39;,\n                sortType: 0,\n                persons: [\n                &#123;id: &#39;1001&#39;, name: &#39;马冬梅&#39;, age: 19, sex: &#39;女&#39;&#125;,\n                &#123;id: &#39;1002&#39;, name: &#39;周冬雨&#39;, age: 30, sex: &#39;女&#39;&#125;,\n                &#123;id: &#39;1002&#39;, name: &#39;周冬雨&#39;, age: 30, sex: &#39;女&#39;&#125;,\n                &#123;id: &#39;1003&#39;, name: &#39;周杰伦&#39;, age: 21, sex: &#39;男&#39;&#125;,\n                &#123;id: &#39;1004&#39;, name: &#39;温兆伦&#39;, age: 22, sex: &#39;男&#39;&#125;, \n            ], \n            &#125;,\n            &#x2F;&#x2F;用computed实现\n            computed: &#123;\n                filpersons() &#123;\n                    const arr &#x3D; this.persons.filter((p)&#x3D;&gt;&#123;\n                        return p.name.indexOf(this.keyWord) !&#x3D;&#x3D; -1\n                    &#125;)\n                    if(this.sortType) &#123;\n                        arr.sort((p1, p2)&#x3D;&gt;&#123;\n                            return this.sortType &#x3D;&#x3D;&#x3D; 1 ? p2.age-p1.age : p1.age-p2.age\n                        &#125;)\n                    &#125;\n                    return arr\n                &#125;\n            &#125;\n             \n            &#125;\n        )\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt; \n&lt;&#x2F;html&gt;</code></pre>\n<h4 id=\"5-Vue监测数据改变的原理\"><a href=\"#5-Vue监测数据改变的原理\" class=\"headerlink\" title=\"5.Vue监测数据改变的原理\"></a>5.Vue监测数据改变的原理</h4><pre><code>1. vue会监视data中所有层次的数据\n2. 如何监测对象中的数据？\n    通过setter实现监视，且要在new Vue时就传入要监测的数据\n    1. 对象中后追加的属性，Vue默认不做响应式处理\n    2. 如需给后添加的属性做响应式，请使用如下API：\n            Vue.set(target, propertyName/index, value)或vm.$set(target, propertyName/index, value)\n3. 如何监测数据中的数据？\n    通过包裹数组更新元素的方法实现，本质就是做了两件事\n   1. 调用原生对应的方法对数组进行更新\n   2. 重新解析模板，进而更新页面\n4. 在Vue修改数组中的某个元素一定要用如下方法：\n   1. 使用这些API: push()、pop()、shift()、unshift()、splice()、sort()、reverse()\n   2. Vue.set() 或 vm.$set()\n</code></pre>\n<p> <strong>Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt; \n&lt;&#x2F;head&gt;\n&lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue .js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;body&gt;\n    \n    &lt;div id&#x3D;&quot;root&quot;&gt;    \n        &lt;h1&gt;学生信息&lt;&#x2F;h1&gt; \n        &lt;button @click&#x3D;&quot;student.age++&quot;&gt;年龄+1岁&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n        &lt;button @click&#x3D;&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;&#x2F;button&gt;&lt;br&#x2F;&gt;\n        &lt;button @click&#x3D;&quot;addFriend&quot;&gt;再列表首位添加一个朋友&lt;&#x2F;button&gt;&lt;br&#x2F;&gt;\n        &lt;button @click&#x3D;&quot;updateFirstFriend&quot;&gt;修改第一个朋友的名字为：李四&lt;&#x2F;button&gt;&lt;&#x2F;button&gt;&lt;br&#x2F;&gt;\n        &lt;button @click&#x3D;&quot;addHobby&quot;&gt;添加一个爱好&lt;&#x2F;button&gt;&lt;br&#x2F;&gt;\n        &lt;button @click&#x3D;&quot;updateHobby&quot;&gt;修改一个爱好为:开车&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n        &lt;h2&gt;姓名: &#123;&#123;student.name&#125;&#125;&lt;&#x2F;h2&gt;  \n        &lt;h2 v-show&#x3D;&quot;student.sex&quot;&gt;学生性别: &#123;&#123;student.sex&#125;&#125;&lt;&#x2F;h2&gt;  &lt;br&#x2F;&gt;\n        &lt;h2&gt;年龄: &#123;&#123;student.age&#125;&#125;&lt;&#x2F;h2&gt;  \n        &lt;h2&gt;爱好&lt;&#x2F;h2&gt;\n        &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;(h,index) of student.hobby&quot; :key&#x3D;&quot;index&quot;&gt;\n                &#123;&#123;h&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n        &lt;h2&gt;朋友们&lt;&#x2F;h2&gt;\n        &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;(f,index) of student.friends&quot; :key&#x3D;&quot;index&quot;&gt;\n                &#123;&#123;f.name&#125;&#125; --- &#123;&#123;f.age&#125;&#125;\n            &lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n       \n    &lt;&#x2F;div&gt;  \n    &lt;script&gt;\n        Vue.config.productionTip &#x3D; false \n        const vm &#x3D; new Vue(&#123;\n            el: &#39;#root&#39;,\n            data: &#123;\n                name: &#39;尚硅谷&#39;,\n                address: &#39;北京&#39;, \n                student: &#123;\n                    hobby: [&#39;喝酒&#39;, &#39;抽烟&#39;, &#39;烫头&#39;],\n                    name: &#39;tom&#39;,\n                    age: 23,\n                    friends: [\n                        &#123;name: &#39;jerry&#39;, age: 35&#125;,\n                        &#123;name: &#39;Mike&#39;, age: 25&#125;\n                    ]\n                &#125;, \n            &#125;,\n            methods: &#123;\n                addSex() &#123;\n                   &#x2F;&#x2F; Vue.set(this.student, &#39;sex&#39;, &#39;女&#39;)\n                    this.$set(this.student, &#39;sex&#39;, &#39;男&#39;)\n                &#125;,\n                addFriend() &#123;\n                    this.student.friends.unshift(&#123;name: &#39;张三&#39;, age: &#39;23&#39;&#125;)\n                &#125;,\n                updateFirstFriend() &#123;\n                    this.student.friends[0].name &#x3D; &#39;李四&#39;\n                &#125;,\n                addHobby() &#123;\n                    this.student.hobby.push(&#39;学习&#39;)\n                &#125;,\n                updateHobby() &#123;\n                    &#x2F;&#x2F; this.student.hobby.splice(0, 1, &#39;开车&#39;)\n                    Vue.set(this.student.hobby, 0, &#39;开车&#39;)\n                &#125;\n            &#125;\n        &#125;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt; \n&lt;&#x2F;html&gt;</code></pre>\n<h3 id=\"13-收集表单数据\"><a href=\"#13-收集表单数据\" class=\"headerlink\" title=\"13_收集表单数据\"></a>13_收集表单数据</h3>","feature":true,"text":"Vue核心01_初识Vue:1. 想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象 2. root容器里的代码依然符合html规范，只不过混入了特殊的Vue语法 3. root容器里的代码被称为【Vue模板】 4. Vue实例和容器是一一对应的 5. 真实开发中只有...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[],"tags":[{"name":"Vue2","slug":"Vue2","count":1,"path":"api/tags/Vue2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">Vue核心</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#01-%E5%88%9D%E8%AF%86Vue\"><span class=\"toc-text\">01_初识Vue:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#02-Vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">02_Vue模板语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#03-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">03_数据绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#04-el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95\"><span class=\"toc-text\">04_el与data的两种写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#05-MVVM\"><span class=\"toc-text\">05_MVVM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#06-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">06_数据代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E9%A1%BEObject-defineproperty%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">回顾Object.defineproperty方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">何为数据代理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Vue%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">Vue中的数据代理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#07-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">07_事件处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.事件的基本使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">2.事件修饰符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.键盘事件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#08-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">08_计算属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-methods%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">姓名案例_methods实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">姓名案例_计算属性实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%AE%80%E5%86%99\"><span class=\"toc-text\">姓名案例_计算属性简写</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">09_监视属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%A9%E6%B0%94%E6%A1%88%E4%BE%8B-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">天气案例_监视属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%A9%E6%B0%94%E6%A1%88%E4%BE%8B-%E6%B7%B1%E5%BA%A6%E7%9B%91%E8%A7%86\"><span class=\"toc-text\">天气案例_深度监视</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#computed-%E4%B8%8E-watch%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">computed 与 watch的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">10_绑定样式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">11_条件渲染</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">12_列表渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">1.基本列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-key%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.key的原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">3.列表过滤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">4.列表排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-Vue%E7%9B%91%E6%B5%8B%E6%95%B0%E6%8D%AE%E6%94%B9%E5%8F%98%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.Vue监测数据改变的原理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">13_收集表单数据</span></a></li></ol></li></ol>","author":{"name":"HuangRuYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode 1-50","uid":"18fe105d7c8cde2f9eebd0e775b3d96c","slug":"LeetCode","date":"2023-01-08T12:21:00.000Z","updated":"2023-01-15T06:33:56.728Z","comments":true,"path":"api/articles/LeetCode.json","keywords":null,"cover":null,"text":"1.两数之和*哈希表插入和查询操作复杂度都是0（1） class Solution &#123; public: unordered_map&lt;int,int&gt;p; vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/tags/LeetCode.json"}],"author":{"name":"HuangRuYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}